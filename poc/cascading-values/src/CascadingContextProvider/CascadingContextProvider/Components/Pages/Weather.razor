@page "/{tenantSlug}/weather"
@attribute [StreamRendering]

<PageTitle>Weather</PageTitle>
<CascadingContextProvider.Client.Components.ContextProvider />
<h1>Weather</h1>

<p>This component demonstrates showing data.</p>

@if (forecasts == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Date</th>
                <th aria-label="Temperature in Celsius">Temp. (C)</th>
                <th aria-label="Temperature in Farenheit">Temp. (F)</th>
                <th>Summary</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var forecast in forecasts)
            {
                <tr>
                    <td>@forecast.Date.ToShortDateString()</td>
                    <td>@forecast.TemperatureC</td>
                    <td>@forecast.TemperatureF</td>
                    <td>@forecast.Summary</td>
                </tr>
            }
        </tbody>
    </table>
}

<div style="background:#efefef;border-radius:20px;box-shadow: 10px 10px 10px rgba(0,0,0,0.15);padding:30px;margin-bottom:30px;">
    <p>
        <strong>Tenant:</strong>
        <span>
            @(TenantContext is null ? "Not Set" : TenantContext.Name)
        </span>
    </p>
    <p>
        <strong>Renderer:</strong>
        <span>@RendererInfo.Name</span>
    </p>
</div>

@code {
    [Parameter]
    public string TenantSlug { get; set; } = "unset-weather";

    [CascadingParameter]
    public TenantContext TenantContext { get; set; }

    private WeatherForecast[]? forecasts;

    protected override async Task OnInitializedAsync()
    {
        TenantContext.PropertyChanged += (_, _) => StateHasChanged();

        // Simulate asynchronous loading to demonstrate streaming rendering
        await Task.Delay(500);

        var startDate = DateOnly.FromDateTime(DateTime.Now);
        var summaries = new[] { "Freezing", "Bracing", "Chilly", "Cool", "Mild", "Warm", "Balmy", "Hot", "Sweltering", "Scorching" };
        forecasts = Enumerable.Range(1, 5).Select(index => new WeatherForecast
        {
            Date = startDate.AddDays(index),
            TemperatureC = Random.Shared.Next(-20, 55),
            Summary = summaries[Random.Shared.Next(summaries.Length)]
        }).ToArray();
    }

    private class WeatherForecast
    {
        public DateOnly Date { get; set; }
        public int TemperatureC { get; set; }
        public string? Summary { get; set; }
        public int TemperatureF => 32 + (int)(TemperatureC / 0.5556);
    }
}
